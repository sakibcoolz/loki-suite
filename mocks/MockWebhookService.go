// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/sakibcoolz/loki-suite/internal/models"
	service "github.com/sakibcoolz/loki-suite/internal/service"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockWebhookService is an autogenerated mock type for the WebhookService type
type MockWebhookService struct {
	mock.Mock
}

type MockWebhookService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebhookService) EXPECT() *MockWebhookService_Expecter {
	return &MockWebhookService_Expecter{mock: &_m.Mock}
}

// GenerateWebhook provides a mock function with given fields: req
func (_m *MockWebhookService) GenerateWebhook(req *models.GenerateWebhookRequest) (*models.GenerateWebhookResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for GenerateWebhook")
	}

	var r0 *models.GenerateWebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.GenerateWebhookRequest) (*models.GenerateWebhookResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*models.GenerateWebhookRequest) *models.GenerateWebhookResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GenerateWebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.GenerateWebhookRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookService_GenerateWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateWebhook'
type MockWebhookService_GenerateWebhook_Call struct {
	*mock.Call
}

// GenerateWebhook is a helper method to define mock.On call
//   - req *models.GenerateWebhookRequest
func (_e *MockWebhookService_Expecter) GenerateWebhook(req interface{}) *MockWebhookService_GenerateWebhook_Call {
	return &MockWebhookService_GenerateWebhook_Call{Call: _e.mock.On("GenerateWebhook", req)}
}

func (_c *MockWebhookService_GenerateWebhook_Call) Run(run func(req *models.GenerateWebhookRequest)) *MockWebhookService_GenerateWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.GenerateWebhookRequest))
	})
	return _c
}

func (_c *MockWebhookService_GenerateWebhook_Call) Return(_a0 *models.GenerateWebhookResponse, _a1 error) *MockWebhookService_GenerateWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookService_GenerateWebhook_Call) RunAndReturn(run func(*models.GenerateWebhookRequest) (*models.GenerateWebhookResponse, error)) *MockWebhookService_GenerateWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// ListWebhooks provides a mock function with given fields: tenantID, page, limit
func (_m *MockWebhookService) ListWebhooks(tenantID string, page int, limit int) (*models.WebhookListResponse, error) {
	ret := _m.Called(tenantID, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for ListWebhooks")
	}

	var r0 *models.WebhookListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) (*models.WebhookListResponse, error)); ok {
		return rf(tenantID, page, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) *models.WebhookListResponse); ok {
		r0 = rf(tenantID, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(tenantID, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookService_ListWebhooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWebhooks'
type MockWebhookService_ListWebhooks_Call struct {
	*mock.Call
}

// ListWebhooks is a helper method to define mock.On call
//   - tenantID string
//   - page int
//   - limit int
func (_e *MockWebhookService_Expecter) ListWebhooks(tenantID interface{}, page interface{}, limit interface{}) *MockWebhookService_ListWebhooks_Call {
	return &MockWebhookService_ListWebhooks_Call{Call: _e.mock.On("ListWebhooks", tenantID, page, limit)}
}

func (_c *MockWebhookService_ListWebhooks_Call) Run(run func(tenantID string, page int, limit int)) *MockWebhookService_ListWebhooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockWebhookService_ListWebhooks_Call) Return(_a0 *models.WebhookListResponse, _a1 error) *MockWebhookService_ListWebhooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookService_ListWebhooks_Call) RunAndReturn(run func(string, int, int) (*models.WebhookListResponse, error)) *MockWebhookService_ListWebhooks_Call {
	_c.Call.Return(run)
	return _c
}

// SendEvent provides a mock function with given fields: req
func (_m *MockWebhookService) SendEvent(req *models.SendEventRequest) (*models.EventProcessingResult, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for SendEvent")
	}

	var r0 *models.EventProcessingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.SendEventRequest) (*models.EventProcessingResult, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*models.SendEventRequest) *models.EventProcessingResult); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventProcessingResult)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SendEventRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookService_SendEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEvent'
type MockWebhookService_SendEvent_Call struct {
	*mock.Call
}

// SendEvent is a helper method to define mock.On call
//   - req *models.SendEventRequest
func (_e *MockWebhookService_Expecter) SendEvent(req interface{}) *MockWebhookService_SendEvent_Call {
	return &MockWebhookService_SendEvent_Call{Call: _e.mock.On("SendEvent", req)}
}

func (_c *MockWebhookService_SendEvent_Call) Run(run func(req *models.SendEventRequest)) *MockWebhookService_SendEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SendEventRequest))
	})
	return _c
}

func (_c *MockWebhookService_SendEvent_Call) Return(_a0 *models.EventProcessingResult, _a1 error) *MockWebhookService_SendEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookService_SendEvent_Call) RunAndReturn(run func(*models.SendEventRequest) (*models.EventProcessingResult, error)) *MockWebhookService_SendEvent_Call {
	_c.Call.Return(run)
	return _c
}

// SetChainService provides a mock function with given fields: chainService
func (_m *MockWebhookService) SetChainService(chainService service.ExecutionChainService) {
	_m.Called(chainService)
}

// MockWebhookService_SetChainService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetChainService'
type MockWebhookService_SetChainService_Call struct {
	*mock.Call
}

// SetChainService is a helper method to define mock.On call
//   - chainService service.ExecutionChainService
func (_e *MockWebhookService_Expecter) SetChainService(chainService interface{}) *MockWebhookService_SetChainService_Call {
	return &MockWebhookService_SetChainService_Call{Call: _e.mock.On("SetChainService", chainService)}
}

func (_c *MockWebhookService_SetChainService_Call) Run(run func(chainService service.ExecutionChainService)) *MockWebhookService_SetChainService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(service.ExecutionChainService))
	})
	return _c
}

func (_c *MockWebhookService_SetChainService_Call) Return() *MockWebhookService_SetChainService_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWebhookService_SetChainService_Call) RunAndReturn(run func(service.ExecutionChainService)) *MockWebhookService_SetChainService_Call {
	_c.Run(run)
	return _c
}

// SubscribeWebhook provides a mock function with given fields: req
func (_m *MockWebhookService) SubscribeWebhook(req *models.SubscribeWebhookRequest) (*models.GenerateWebhookResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeWebhook")
	}

	var r0 *models.GenerateWebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.SubscribeWebhookRequest) (*models.GenerateWebhookResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*models.SubscribeWebhookRequest) *models.GenerateWebhookResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GenerateWebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.SubscribeWebhookRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookService_SubscribeWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeWebhook'
type MockWebhookService_SubscribeWebhook_Call struct {
	*mock.Call
}

// SubscribeWebhook is a helper method to define mock.On call
//   - req *models.SubscribeWebhookRequest
func (_e *MockWebhookService_Expecter) SubscribeWebhook(req interface{}) *MockWebhookService_SubscribeWebhook_Call {
	return &MockWebhookService_SubscribeWebhook_Call{Call: _e.mock.On("SubscribeWebhook", req)}
}

func (_c *MockWebhookService_SubscribeWebhook_Call) Run(run func(req *models.SubscribeWebhookRequest)) *MockWebhookService_SubscribeWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.SubscribeWebhookRequest))
	})
	return _c
}

func (_c *MockWebhookService_SubscribeWebhook_Call) Return(_a0 *models.GenerateWebhookResponse, _a1 error) *MockWebhookService_SubscribeWebhook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookService_SubscribeWebhook_Call) RunAndReturn(run func(*models.SubscribeWebhookRequest) (*models.GenerateWebhookResponse, error)) *MockWebhookService_SubscribeWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyWebhook provides a mock function with given fields: webhookID, payload, signature, timestamp, authHeader
func (_m *MockWebhookService) VerifyWebhook(webhookID uuid.UUID, payload []byte, signature string, timestamp string, authHeader string) error {
	ret := _m.Called(webhookID, payload, signature, timestamp, authHeader)

	if len(ret) == 0 {
		panic("no return value specified for VerifyWebhook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []byte, string, string, string) error); ok {
		r0 = rf(webhookID, payload, signature, timestamp, authHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookService_VerifyWebhook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyWebhook'
type MockWebhookService_VerifyWebhook_Call struct {
	*mock.Call
}

// VerifyWebhook is a helper method to define mock.On call
//   - webhookID uuid.UUID
//   - payload []byte
//   - signature string
//   - timestamp string
//   - authHeader string
func (_e *MockWebhookService_Expecter) VerifyWebhook(webhookID interface{}, payload interface{}, signature interface{}, timestamp interface{}, authHeader interface{}) *MockWebhookService_VerifyWebhook_Call {
	return &MockWebhookService_VerifyWebhook_Call{Call: _e.mock.On("VerifyWebhook", webhookID, payload, signature, timestamp, authHeader)}
}

func (_c *MockWebhookService_VerifyWebhook_Call) Run(run func(webhookID uuid.UUID, payload []byte, signature string, timestamp string, authHeader string)) *MockWebhookService_VerifyWebhook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].([]byte), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockWebhookService_VerifyWebhook_Call) Return(_a0 error) *MockWebhookService_VerifyWebhook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookService_VerifyWebhook_Call) RunAndReturn(run func(uuid.UUID, []byte, string, string, string) error) *MockWebhookService_VerifyWebhook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebhookService creates a new instance of MockWebhookService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookService {
	mock := &MockWebhookService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
