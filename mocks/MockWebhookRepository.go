// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "github.com/sakibcoolz/loki-suite/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockWebhookRepository is an autogenerated mock type for the WebhookRepository type
type MockWebhookRepository struct {
	mock.Mock
}

type MockWebhookRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebhookRepository) EXPECT() *MockWebhookRepository_Expecter {
	return &MockWebhookRepository_Expecter{mock: &_m.Mock}
}

// CreateEvent provides a mock function with given fields: event
func (_m *MockWebhookRepository) CreateEvent(event *models.WebhookEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WebhookEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookRepository_CreateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEvent'
type MockWebhookRepository_CreateEvent_Call struct {
	*mock.Call
}

// CreateEvent is a helper method to define mock.On call
//   - event *models.WebhookEvent
func (_e *MockWebhookRepository_Expecter) CreateEvent(event interface{}) *MockWebhookRepository_CreateEvent_Call {
	return &MockWebhookRepository_CreateEvent_Call{Call: _e.mock.On("CreateEvent", event)}
}

func (_c *MockWebhookRepository_CreateEvent_Call) Run(run func(event *models.WebhookEvent)) *MockWebhookRepository_CreateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WebhookEvent))
	})
	return _c
}

func (_c *MockWebhookRepository_CreateEvent_Call) Return(_a0 error) *MockWebhookRepository_CreateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookRepository_CreateEvent_Call) RunAndReturn(run func(*models.WebhookEvent) error) *MockWebhookRepository_CreateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSubscription provides a mock function with given fields: subscription
func (_m *MockWebhookRepository) CreateSubscription(subscription *models.WebhookSubscription) error {
	ret := _m.Called(subscription)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WebhookSubscription) error); ok {
		r0 = rf(subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookRepository_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type MockWebhookRepository_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//   - subscription *models.WebhookSubscription
func (_e *MockWebhookRepository_Expecter) CreateSubscription(subscription interface{}) *MockWebhookRepository_CreateSubscription_Call {
	return &MockWebhookRepository_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", subscription)}
}

func (_c *MockWebhookRepository_CreateSubscription_Call) Run(run func(subscription *models.WebhookSubscription)) *MockWebhookRepository_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WebhookSubscription))
	})
	return _c
}

func (_c *MockWebhookRepository_CreateSubscription_Call) Return(_a0 error) *MockWebhookRepository_CreateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookRepository_CreateSubscription_Call) RunAndReturn(run func(*models.WebhookSubscription) error) *MockWebhookRepository_CreateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSubscription provides a mock function with given fields: id
func (_m *MockWebhookRepository) DeleteSubscription(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookRepository_DeleteSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSubscription'
type MockWebhookRepository_DeleteSubscription_Call struct {
	*mock.Call
}

// DeleteSubscription is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockWebhookRepository_Expecter) DeleteSubscription(id interface{}) *MockWebhookRepository_DeleteSubscription_Call {
	return &MockWebhookRepository_DeleteSubscription_Call{Call: _e.mock.On("DeleteSubscription", id)}
}

func (_c *MockWebhookRepository_DeleteSubscription_Call) Run(run func(id uuid.UUID)) *MockWebhookRepository_DeleteSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockWebhookRepository_DeleteSubscription_Call) Return(_a0 error) *MockWebhookRepository_DeleteSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookRepository_DeleteSubscription_Call) RunAndReturn(run func(uuid.UUID) error) *MockWebhookRepository_DeleteSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveSubscriptionsByTenantAndEvent provides a mock function with given fields: tenantID, event
func (_m *MockWebhookRepository) GetActiveSubscriptionsByTenantAndEvent(tenantID string, event string) ([]models.WebhookSubscription, error) {
	ret := _m.Called(tenantID, event)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveSubscriptionsByTenantAndEvent")
	}

	var r0 []models.WebhookSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]models.WebhookSubscription, error)); ok {
		return rf(tenantID, event)
	}
	if rf, ok := ret.Get(0).(func(string, string) []models.WebhookSubscription); ok {
		r0 = rf(tenantID, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenantID, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveSubscriptionsByTenantAndEvent'
type MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call struct {
	*mock.Call
}

// GetActiveSubscriptionsByTenantAndEvent is a helper method to define mock.On call
//   - tenantID string
//   - event string
func (_e *MockWebhookRepository_Expecter) GetActiveSubscriptionsByTenantAndEvent(tenantID interface{}, event interface{}) *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call {
	return &MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call{Call: _e.mock.On("GetActiveSubscriptionsByTenantAndEvent", tenantID, event)}
}

func (_c *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call) Run(run func(tenantID string, event string)) *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call) Return(_a0 []models.WebhookSubscription, _a1 error) *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call) RunAndReturn(run func(string, string) ([]models.WebhookSubscription, error)) *MockWebhookRepository_GetActiveSubscriptionsByTenantAndEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventByID provides a mock function with given fields: id
func (_m *MockWebhookRepository) GetEventByID(id uuid.UUID) (*models.WebhookEvent, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetEventByID")
	}

	var r0 *models.WebhookEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.WebhookEvent, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.WebhookEvent); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookRepository_GetEventByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventByID'
type MockWebhookRepository_GetEventByID_Call struct {
	*mock.Call
}

// GetEventByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockWebhookRepository_Expecter) GetEventByID(id interface{}) *MockWebhookRepository_GetEventByID_Call {
	return &MockWebhookRepository_GetEventByID_Call{Call: _e.mock.On("GetEventByID", id)}
}

func (_c *MockWebhookRepository_GetEventByID_Call) Run(run func(id uuid.UUID)) *MockWebhookRepository_GetEventByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockWebhookRepository_GetEventByID_Call) Return(_a0 *models.WebhookEvent, _a1 error) *MockWebhookRepository_GetEventByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookRepository_GetEventByID_Call) RunAndReturn(run func(uuid.UUID) (*models.WebhookEvent, error)) *MockWebhookRepository_GetEventByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetEventsByStatus provides a mock function with given fields: status, limit
func (_m *MockWebhookRepository) GetEventsByStatus(status models.WebhookStatus, limit int) ([]models.WebhookEvent, error) {
	ret := _m.Called(status, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetEventsByStatus")
	}

	var r0 []models.WebhookEvent
	var r1 error
	if rf, ok := ret.Get(0).(func(models.WebhookStatus, int) ([]models.WebhookEvent, error)); ok {
		return rf(status, limit)
	}
	if rf, ok := ret.Get(0).(func(models.WebhookStatus, int) []models.WebhookEvent); ok {
		r0 = rf(status, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookEvent)
		}
	}

	if rf, ok := ret.Get(1).(func(models.WebhookStatus, int) error); ok {
		r1 = rf(status, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookRepository_GetEventsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsByStatus'
type MockWebhookRepository_GetEventsByStatus_Call struct {
	*mock.Call
}

// GetEventsByStatus is a helper method to define mock.On call
//   - status models.WebhookStatus
//   - limit int
func (_e *MockWebhookRepository_Expecter) GetEventsByStatus(status interface{}, limit interface{}) *MockWebhookRepository_GetEventsByStatus_Call {
	return &MockWebhookRepository_GetEventsByStatus_Call{Call: _e.mock.On("GetEventsByStatus", status, limit)}
}

func (_c *MockWebhookRepository_GetEventsByStatus_Call) Run(run func(status models.WebhookStatus, limit int)) *MockWebhookRepository_GetEventsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.WebhookStatus), args[1].(int))
	})
	return _c
}

func (_c *MockWebhookRepository_GetEventsByStatus_Call) Return(_a0 []models.WebhookEvent, _a1 error) *MockWebhookRepository_GetEventsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookRepository_GetEventsByStatus_Call) RunAndReturn(run func(models.WebhookStatus, int) ([]models.WebhookEvent, error)) *MockWebhookRepository_GetEventsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptionByID provides a mock function with given fields: id
func (_m *MockWebhookRepository) GetSubscriptionByID(id uuid.UUID) (*models.WebhookSubscription, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionByID")
	}

	var r0 *models.WebhookSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*models.WebhookSubscription, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *models.WebhookSubscription); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebhookSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebhookRepository_GetSubscriptionByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionByID'
type MockWebhookRepository_GetSubscriptionByID_Call struct {
	*mock.Call
}

// GetSubscriptionByID is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockWebhookRepository_Expecter) GetSubscriptionByID(id interface{}) *MockWebhookRepository_GetSubscriptionByID_Call {
	return &MockWebhookRepository_GetSubscriptionByID_Call{Call: _e.mock.On("GetSubscriptionByID", id)}
}

func (_c *MockWebhookRepository_GetSubscriptionByID_Call) Run(run func(id uuid.UUID)) *MockWebhookRepository_GetSubscriptionByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockWebhookRepository_GetSubscriptionByID_Call) Return(_a0 *models.WebhookSubscription, _a1 error) *MockWebhookRepository_GetSubscriptionByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebhookRepository_GetSubscriptionByID_Call) RunAndReturn(run func(uuid.UUID) (*models.WebhookSubscription, error)) *MockWebhookRepository_GetSubscriptionByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptionsByTenant provides a mock function with given fields: tenantID, offset, limit
func (_m *MockWebhookRepository) GetSubscriptionsByTenant(tenantID string, offset int, limit int) ([]models.WebhookSubscription, int64, error) {
	ret := _m.Called(tenantID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionsByTenant")
	}

	var r0 []models.WebhookSubscription
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]models.WebhookSubscription, int64, error)); ok {
		return rf(tenantID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []models.WebhookSubscription); ok {
		r0 = rf(tenantID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebhookSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(tenantID, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(tenantID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockWebhookRepository_GetSubscriptionsByTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionsByTenant'
type MockWebhookRepository_GetSubscriptionsByTenant_Call struct {
	*mock.Call
}

// GetSubscriptionsByTenant is a helper method to define mock.On call
//   - tenantID string
//   - offset int
//   - limit int
func (_e *MockWebhookRepository_Expecter) GetSubscriptionsByTenant(tenantID interface{}, offset interface{}, limit interface{}) *MockWebhookRepository_GetSubscriptionsByTenant_Call {
	return &MockWebhookRepository_GetSubscriptionsByTenant_Call{Call: _e.mock.On("GetSubscriptionsByTenant", tenantID, offset, limit)}
}

func (_c *MockWebhookRepository_GetSubscriptionsByTenant_Call) Run(run func(tenantID string, offset int, limit int)) *MockWebhookRepository_GetSubscriptionsByTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockWebhookRepository_GetSubscriptionsByTenant_Call) Return(_a0 []models.WebhookSubscription, _a1 int64, _a2 error) *MockWebhookRepository_GetSubscriptionsByTenant_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockWebhookRepository_GetSubscriptionsByTenant_Call) RunAndReturn(run func(string, int, int) ([]models.WebhookSubscription, int64, error)) *MockWebhookRepository_GetSubscriptionsByTenant_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvent provides a mock function with given fields: event
func (_m *MockWebhookRepository) UpdateEvent(event *models.WebhookEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WebhookEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookRepository_UpdateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvent'
type MockWebhookRepository_UpdateEvent_Call struct {
	*mock.Call
}

// UpdateEvent is a helper method to define mock.On call
//   - event *models.WebhookEvent
func (_e *MockWebhookRepository_Expecter) UpdateEvent(event interface{}) *MockWebhookRepository_UpdateEvent_Call {
	return &MockWebhookRepository_UpdateEvent_Call{Call: _e.mock.On("UpdateEvent", event)}
}

func (_c *MockWebhookRepository_UpdateEvent_Call) Run(run func(event *models.WebhookEvent)) *MockWebhookRepository_UpdateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WebhookEvent))
	})
	return _c
}

func (_c *MockWebhookRepository_UpdateEvent_Call) Return(_a0 error) *MockWebhookRepository_UpdateEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookRepository_UpdateEvent_Call) RunAndReturn(run func(*models.WebhookEvent) error) *MockWebhookRepository_UpdateEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSubscription provides a mock function with given fields: subscription
func (_m *MockWebhookRepository) UpdateSubscription(subscription *models.WebhookSubscription) error {
	ret := _m.Called(subscription)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscription")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.WebhookSubscription) error); ok {
		r0 = rf(subscription)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWebhookRepository_UpdateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSubscription'
type MockWebhookRepository_UpdateSubscription_Call struct {
	*mock.Call
}

// UpdateSubscription is a helper method to define mock.On call
//   - subscription *models.WebhookSubscription
func (_e *MockWebhookRepository_Expecter) UpdateSubscription(subscription interface{}) *MockWebhookRepository_UpdateSubscription_Call {
	return &MockWebhookRepository_UpdateSubscription_Call{Call: _e.mock.On("UpdateSubscription", subscription)}
}

func (_c *MockWebhookRepository_UpdateSubscription_Call) Run(run func(subscription *models.WebhookSubscription)) *MockWebhookRepository_UpdateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.WebhookSubscription))
	})
	return _c
}

func (_c *MockWebhookRepository_UpdateSubscription_Call) Return(_a0 error) *MockWebhookRepository_UpdateSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebhookRepository_UpdateSubscription_Call) RunAndReturn(run func(*models.WebhookSubscription) error) *MockWebhookRepository_UpdateSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebhookRepository creates a new instance of MockWebhookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebhookRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebhookRepository {
	mock := &MockWebhookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
