// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sakibcoolz/loki-suite/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockExecutionChainRepository is an autogenerated mock type for the ExecutionChainRepository type
type MockExecutionChainRepository struct {
	mock.Mock
}

type MockExecutionChainRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionChainRepository) EXPECT() *MockExecutionChainRepository_Expecter {
	return &MockExecutionChainRepository_Expecter{mock: &_m.Mock}
}

// CreateChain provides a mock function with given fields: ctx, chain
func (_m *MockExecutionChainRepository) CreateChain(ctx context.Context, chain *models.ExecutionChain) error {
	ret := _m.Called(ctx, chain)

	if len(ret) == 0 {
		panic("no return value specified for CreateChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExecutionChain) error); ok {
		r0 = rf(ctx, chain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_CreateChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChain'
type MockExecutionChainRepository_CreateChain_Call struct {
	*mock.Call
}

// CreateChain is a helper method to define mock.On call
//   - ctx context.Context
//   - chain *models.ExecutionChain
func (_e *MockExecutionChainRepository_Expecter) CreateChain(ctx interface{}, chain interface{}) *MockExecutionChainRepository_CreateChain_Call {
	return &MockExecutionChainRepository_CreateChain_Call{Call: _e.mock.On("CreateChain", ctx, chain)}
}

func (_c *MockExecutionChainRepository_CreateChain_Call) Run(run func(ctx context.Context, chain *models.ExecutionChain)) *MockExecutionChainRepository_CreateChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ExecutionChain))
	})
	return _c
}

func (_c *MockExecutionChainRepository_CreateChain_Call) Return(_a0 error) *MockExecutionChainRepository_CreateChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_CreateChain_Call) RunAndReturn(run func(context.Context, *models.ExecutionChain) error) *MockExecutionChainRepository_CreateChain_Call {
	_c.Call.Return(run)
	return _c
}

// CreateChainRun provides a mock function with given fields: ctx, run
func (_m *MockExecutionChainRepository) CreateChainRun(ctx context.Context, run *models.ExecutionChainRun) error {
	ret := _m.Called(ctx, run)

	if len(ret) == 0 {
		panic("no return value specified for CreateChainRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExecutionChainRun) error); ok {
		r0 = rf(ctx, run)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_CreateChainRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateChainRun'
type MockExecutionChainRepository_CreateChainRun_Call struct {
	*mock.Call
}

// CreateChainRun is a helper method to define mock.On call
//   - ctx context.Context
//   - run *models.ExecutionChainRun
func (_e *MockExecutionChainRepository_Expecter) CreateChainRun(ctx interface{}, run interface{}) *MockExecutionChainRepository_CreateChainRun_Call {
	return &MockExecutionChainRepository_CreateChainRun_Call{Call: _e.mock.On("CreateChainRun", ctx, run)}
}

func (_c *MockExecutionChainRepository_CreateChainRun_Call) Run(run func(ctx context.Context, run *models.ExecutionChainRun)) *MockExecutionChainRepository_CreateChainRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ExecutionChainRun))
	})
	return _c
}

func (_c *MockExecutionChainRepository_CreateChainRun_Call) Return(_a0 error) *MockExecutionChainRepository_CreateChainRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_CreateChainRun_Call) RunAndReturn(run func(context.Context, *models.ExecutionChainRun) error) *MockExecutionChainRepository_CreateChainRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStepRun provides a mock function with given fields: ctx, stepRun
func (_m *MockExecutionChainRepository) CreateStepRun(ctx context.Context, stepRun *models.ExecutionChainStepRun) error {
	ret := _m.Called(ctx, stepRun)

	if len(ret) == 0 {
		panic("no return value specified for CreateStepRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.ExecutionChainStepRun) error); ok {
		r0 = rf(ctx, stepRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_CreateStepRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStepRun'
type MockExecutionChainRepository_CreateStepRun_Call struct {
	*mock.Call
}

// CreateStepRun is a helper method to define mock.On call
//   - ctx context.Context
//   - stepRun *models.ExecutionChainStepRun
func (_e *MockExecutionChainRepository_Expecter) CreateStepRun(ctx interface{}, stepRun interface{}) *MockExecutionChainRepository_CreateStepRun_Call {
	return &MockExecutionChainRepository_CreateStepRun_Call{Call: _e.mock.On("CreateStepRun", ctx, stepRun)}
}

func (_c *MockExecutionChainRepository_CreateStepRun_Call) Run(run func(ctx context.Context, stepRun *models.ExecutionChainStepRun)) *MockExecutionChainRepository_CreateStepRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.ExecutionChainStepRun))
	})
	return _c
}

func (_c *MockExecutionChainRepository_CreateStepRun_Call) Return(_a0 error) *MockExecutionChainRepository_CreateStepRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_CreateStepRun_Call) RunAndReturn(run func(context.Context, *models.ExecutionChainStepRun) error) *MockExecutionChainRepository_CreateStepRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteChain provides a mock function with given fields: ctx, id
func (_m *MockExecutionChainRepository) DeleteChain(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_DeleteChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteChain'
type MockExecutionChainRepository_DeleteChain_Call struct {
	*mock.Call
}

// DeleteChain is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockExecutionChainRepository_Expecter) DeleteChain(ctx interface{}, id interface{}) *MockExecutionChainRepository_DeleteChain_Call {
	return &MockExecutionChainRepository_DeleteChain_Call{Call: _e.mock.On("DeleteChain", ctx, id)}
}

func (_c *MockExecutionChainRepository_DeleteChain_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockExecutionChainRepository_DeleteChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExecutionChainRepository_DeleteChain_Call) Return(_a0 error) *MockExecutionChainRepository_DeleteChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_DeleteChain_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockExecutionChainRepository_DeleteChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainByID provides a mock function with given fields: ctx, id
func (_m *MockExecutionChainRepository) GetChainByID(ctx context.Context, id uuid.UUID) (*models.ExecutionChain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetChainByID")
	}

	var r0 *models.ExecutionChain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ExecutionChain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ExecutionChain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExecutionChain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionChainRepository_GetChainByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainByID'
type MockExecutionChainRepository_GetChainByID_Call struct {
	*mock.Call
}

// GetChainByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockExecutionChainRepository_Expecter) GetChainByID(ctx interface{}, id interface{}) *MockExecutionChainRepository_GetChainByID_Call {
	return &MockExecutionChainRepository_GetChainByID_Call{Call: _e.mock.On("GetChainByID", ctx, id)}
}

func (_c *MockExecutionChainRepository_GetChainByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockExecutionChainRepository_GetChainByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetChainByID_Call) Return(_a0 *models.ExecutionChain, _a1 error) *MockExecutionChainRepository_GetChainByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionChainRepository_GetChainByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.ExecutionChain, error)) *MockExecutionChainRepository_GetChainByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainRunByID provides a mock function with given fields: ctx, runID
func (_m *MockExecutionChainRepository) GetChainRunByID(ctx context.Context, runID uuid.UUID) (*models.ExecutionChainRun, error) {
	ret := _m.Called(ctx, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainRunByID")
	}

	var r0 *models.ExecutionChainRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.ExecutionChainRun, error)); ok {
		return rf(ctx, runID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.ExecutionChainRun); ok {
		r0 = rf(ctx, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ExecutionChainRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionChainRepository_GetChainRunByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainRunByID'
type MockExecutionChainRepository_GetChainRunByID_Call struct {
	*mock.Call
}

// GetChainRunByID is a helper method to define mock.On call
//   - ctx context.Context
//   - runID uuid.UUID
func (_e *MockExecutionChainRepository_Expecter) GetChainRunByID(ctx interface{}, runID interface{}) *MockExecutionChainRepository_GetChainRunByID_Call {
	return &MockExecutionChainRepository_GetChainRunByID_Call{Call: _e.mock.On("GetChainRunByID", ctx, runID)}
}

func (_c *MockExecutionChainRepository_GetChainRunByID_Call) Run(run func(ctx context.Context, runID uuid.UUID)) *MockExecutionChainRepository_GetChainRunByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetChainRunByID_Call) Return(_a0 *models.ExecutionChainRun, _a1 error) *MockExecutionChainRepository_GetChainRunByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionChainRepository_GetChainRunByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.ExecutionChainRun, error)) *MockExecutionChainRepository_GetChainRunByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainRunsByChain provides a mock function with given fields: ctx, chainID, offset, limit
func (_m *MockExecutionChainRepository) GetChainRunsByChain(ctx context.Context, chainID uuid.UUID, offset int, limit int) ([]*models.ExecutionChainRun, int64, error) {
	ret := _m.Called(ctx, chainID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetChainRunsByChain")
	}

	var r0 []*models.ExecutionChainRun
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*models.ExecutionChainRun, int64, error)); ok {
		return rf(ctx, chainID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*models.ExecutionChainRun); ok {
		r0 = rf(ctx, chainID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExecutionChainRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) int64); ok {
		r1 = rf(ctx, chainID, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = rf(ctx, chainID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockExecutionChainRepository_GetChainRunsByChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainRunsByChain'
type MockExecutionChainRepository_GetChainRunsByChain_Call struct {
	*mock.Call
}

// GetChainRunsByChain is a helper method to define mock.On call
//   - ctx context.Context
//   - chainID uuid.UUID
//   - offset int
//   - limit int
func (_e *MockExecutionChainRepository_Expecter) GetChainRunsByChain(ctx interface{}, chainID interface{}, offset interface{}, limit interface{}) *MockExecutionChainRepository_GetChainRunsByChain_Call {
	return &MockExecutionChainRepository_GetChainRunsByChain_Call{Call: _e.mock.On("GetChainRunsByChain", ctx, chainID, offset, limit)}
}

func (_c *MockExecutionChainRepository_GetChainRunsByChain_Call) Run(run func(ctx context.Context, chainID uuid.UUID, offset int, limit int)) *MockExecutionChainRepository_GetChainRunsByChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetChainRunsByChain_Call) Return(_a0 []*models.ExecutionChainRun, _a1 int64, _a2 error) *MockExecutionChainRepository_GetChainRunsByChain_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockExecutionChainRepository_GetChainRunsByChain_Call) RunAndReturn(run func(context.Context, uuid.UUID, int, int) ([]*models.ExecutionChainRun, int64, error)) *MockExecutionChainRepository_GetChainRunsByChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainsByTenant provides a mock function with given fields: ctx, tenantID, offset, limit
func (_m *MockExecutionChainRepository) GetChainsByTenant(ctx context.Context, tenantID string, offset int, limit int) ([]*models.ExecutionChain, int64, error) {
	ret := _m.Called(ctx, tenantID, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetChainsByTenant")
	}

	var r0 []*models.ExecutionChain
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*models.ExecutionChain, int64, error)); ok {
		return rf(ctx, tenantID, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*models.ExecutionChain); ok {
		r0 = rf(ctx, tenantID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExecutionChain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, tenantID, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, tenantID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockExecutionChainRepository_GetChainsByTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainsByTenant'
type MockExecutionChainRepository_GetChainsByTenant_Call struct {
	*mock.Call
}

// GetChainsByTenant is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - offset int
//   - limit int
func (_e *MockExecutionChainRepository_Expecter) GetChainsByTenant(ctx interface{}, tenantID interface{}, offset interface{}, limit interface{}) *MockExecutionChainRepository_GetChainsByTenant_Call {
	return &MockExecutionChainRepository_GetChainsByTenant_Call{Call: _e.mock.On("GetChainsByTenant", ctx, tenantID, offset, limit)}
}

func (_c *MockExecutionChainRepository_GetChainsByTenant_Call) Run(run func(ctx context.Context, tenantID string, offset int, limit int)) *MockExecutionChainRepository_GetChainsByTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetChainsByTenant_Call) Return(_a0 []*models.ExecutionChain, _a1 int64, _a2 error) *MockExecutionChainRepository_GetChainsByTenant_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockExecutionChainRepository_GetChainsByTenant_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*models.ExecutionChain, int64, error)) *MockExecutionChainRepository_GetChainsByTenant_Call {
	_c.Call.Return(run)
	return _c
}

// GetChainsByTriggerEvent provides a mock function with given fields: ctx, tenantID, event
func (_m *MockExecutionChainRepository) GetChainsByTriggerEvent(ctx context.Context, tenantID string, event string) ([]*models.ExecutionChain, error) {
	ret := _m.Called(ctx, tenantID, event)

	if len(ret) == 0 {
		panic("no return value specified for GetChainsByTriggerEvent")
	}

	var r0 []*models.ExecutionChain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*models.ExecutionChain, error)); ok {
		return rf(ctx, tenantID, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*models.ExecutionChain); ok {
		r0 = rf(ctx, tenantID, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExecutionChain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenantID, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionChainRepository_GetChainsByTriggerEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChainsByTriggerEvent'
type MockExecutionChainRepository_GetChainsByTriggerEvent_Call struct {
	*mock.Call
}

// GetChainsByTriggerEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - tenantID string
//   - event string
func (_e *MockExecutionChainRepository_Expecter) GetChainsByTriggerEvent(ctx interface{}, tenantID interface{}, event interface{}) *MockExecutionChainRepository_GetChainsByTriggerEvent_Call {
	return &MockExecutionChainRepository_GetChainsByTriggerEvent_Call{Call: _e.mock.On("GetChainsByTriggerEvent", ctx, tenantID, event)}
}

func (_c *MockExecutionChainRepository_GetChainsByTriggerEvent_Call) Run(run func(ctx context.Context, tenantID string, event string)) *MockExecutionChainRepository_GetChainsByTriggerEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetChainsByTriggerEvent_Call) Return(_a0 []*models.ExecutionChain, _a1 error) *MockExecutionChainRepository_GetChainsByTriggerEvent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionChainRepository_GetChainsByTriggerEvent_Call) RunAndReturn(run func(context.Context, string, string) ([]*models.ExecutionChain, error)) *MockExecutionChainRepository_GetChainsByTriggerEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetStepRunsByRun provides a mock function with given fields: ctx, runID
func (_m *MockExecutionChainRepository) GetStepRunsByRun(ctx context.Context, runID uuid.UUID) ([]*models.ExecutionChainStepRun, error) {
	ret := _m.Called(ctx, runID)

	if len(ret) == 0 {
		panic("no return value specified for GetStepRunsByRun")
	}

	var r0 []*models.ExecutionChainStepRun
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*models.ExecutionChainStepRun, error)); ok {
		return rf(ctx, runID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*models.ExecutionChainStepRun); ok {
		r0 = rf(ctx, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ExecutionChainStepRun)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionChainRepository_GetStepRunsByRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStepRunsByRun'
type MockExecutionChainRepository_GetStepRunsByRun_Call struct {
	*mock.Call
}

// GetStepRunsByRun is a helper method to define mock.On call
//   - ctx context.Context
//   - runID uuid.UUID
func (_e *MockExecutionChainRepository_Expecter) GetStepRunsByRun(ctx interface{}, runID interface{}) *MockExecutionChainRepository_GetStepRunsByRun_Call {
	return &MockExecutionChainRepository_GetStepRunsByRun_Call{Call: _e.mock.On("GetStepRunsByRun", ctx, runID)}
}

func (_c *MockExecutionChainRepository_GetStepRunsByRun_Call) Run(run func(ctx context.Context, runID uuid.UUID)) *MockExecutionChainRepository_GetStepRunsByRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockExecutionChainRepository_GetStepRunsByRun_Call) Return(_a0 []*models.ExecutionChainStepRun, _a1 error) *MockExecutionChainRepository_GetStepRunsByRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionChainRepository_GetStepRunsByRun_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*models.ExecutionChainStepRun, error)) *MockExecutionChainRepository_GetStepRunsByRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChain provides a mock function with given fields: ctx, id, updates
func (_m *MockExecutionChainRepository) UpdateChain(ctx context.Context, id uuid.UUID, updates map[string]interface{}) error {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChain")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(ctx, id, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_UpdateChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChain'
type MockExecutionChainRepository_UpdateChain_Call struct {
	*mock.Call
}

// UpdateChain is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - updates map[string]interface{}
func (_e *MockExecutionChainRepository_Expecter) UpdateChain(ctx interface{}, id interface{}, updates interface{}) *MockExecutionChainRepository_UpdateChain_Call {
	return &MockExecutionChainRepository_UpdateChain_Call{Call: _e.mock.On("UpdateChain", ctx, id, updates)}
}

func (_c *MockExecutionChainRepository_UpdateChain_Call) Run(run func(ctx context.Context, id uuid.UUID, updates map[string]interface{})) *MockExecutionChainRepository_UpdateChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChain_Call) Return(_a0 error) *MockExecutionChainRepository_UpdateChain_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChain_Call) RunAndReturn(run func(context.Context, uuid.UUID, map[string]interface{}) error) *MockExecutionChainRepository_UpdateChain_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChainRunStatus provides a mock function with given fields: ctx, runID, status
func (_m *MockExecutionChainRepository) UpdateChainRunStatus(ctx context.Context, runID uuid.UUID, status models.ExecutionChainStatus) error {
	ret := _m.Called(ctx, runID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChainRunStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, models.ExecutionChainStatus) error); ok {
		r0 = rf(ctx, runID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_UpdateChainRunStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChainRunStatus'
type MockExecutionChainRepository_UpdateChainRunStatus_Call struct {
	*mock.Call
}

// UpdateChainRunStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - runID uuid.UUID
//   - status models.ExecutionChainStatus
func (_e *MockExecutionChainRepository_Expecter) UpdateChainRunStatus(ctx interface{}, runID interface{}, status interface{}) *MockExecutionChainRepository_UpdateChainRunStatus_Call {
	return &MockExecutionChainRepository_UpdateChainRunStatus_Call{Call: _e.mock.On("UpdateChainRunStatus", ctx, runID, status)}
}

func (_c *MockExecutionChainRepository_UpdateChainRunStatus_Call) Run(run func(ctx context.Context, runID uuid.UUID, status models.ExecutionChainStatus)) *MockExecutionChainRepository_UpdateChainRunStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(models.ExecutionChainStatus))
	})
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChainRunStatus_Call) Return(_a0 error) *MockExecutionChainRepository_UpdateChainRunStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChainRunStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, models.ExecutionChainStatus) error) *MockExecutionChainRepository_UpdateChainRunStatus_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateChainRunStep provides a mock function with given fields: ctx, runID, currentStep
func (_m *MockExecutionChainRepository) UpdateChainRunStep(ctx context.Context, runID uuid.UUID, currentStep int) error {
	ret := _m.Called(ctx, runID, currentStep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChainRunStep")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) error); ok {
		r0 = rf(ctx, runID, currentStep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_UpdateChainRunStep_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateChainRunStep'
type MockExecutionChainRepository_UpdateChainRunStep_Call struct {
	*mock.Call
}

// UpdateChainRunStep is a helper method to define mock.On call
//   - ctx context.Context
//   - runID uuid.UUID
//   - currentStep int
func (_e *MockExecutionChainRepository_Expecter) UpdateChainRunStep(ctx interface{}, runID interface{}, currentStep interface{}) *MockExecutionChainRepository_UpdateChainRunStep_Call {
	return &MockExecutionChainRepository_UpdateChainRunStep_Call{Call: _e.mock.On("UpdateChainRunStep", ctx, runID, currentStep)}
}

func (_c *MockExecutionChainRepository_UpdateChainRunStep_Call) Run(run func(ctx context.Context, runID uuid.UUID, currentStep int)) *MockExecutionChainRepository_UpdateChainRunStep_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(int))
	})
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChainRunStep_Call) Return(_a0 error) *MockExecutionChainRepository_UpdateChainRunStep_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_UpdateChainRunStep_Call) RunAndReturn(run func(context.Context, uuid.UUID, int) error) *MockExecutionChainRepository_UpdateChainRunStep_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStepRun provides a mock function with given fields: ctx, stepRunID, updates
func (_m *MockExecutionChainRepository) UpdateStepRun(ctx context.Context, stepRunID uuid.UUID, updates map[string]interface{}) error {
	ret := _m.Called(ctx, stepRunID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStepRun")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]interface{}) error); ok {
		r0 = rf(ctx, stepRunID, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockExecutionChainRepository_UpdateStepRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStepRun'
type MockExecutionChainRepository_UpdateStepRun_Call struct {
	*mock.Call
}

// UpdateStepRun is a helper method to define mock.On call
//   - ctx context.Context
//   - stepRunID uuid.UUID
//   - updates map[string]interface{}
func (_e *MockExecutionChainRepository_Expecter) UpdateStepRun(ctx interface{}, stepRunID interface{}, updates interface{}) *MockExecutionChainRepository_UpdateStepRun_Call {
	return &MockExecutionChainRepository_UpdateStepRun_Call{Call: _e.mock.On("UpdateStepRun", ctx, stepRunID, updates)}
}

func (_c *MockExecutionChainRepository_UpdateStepRun_Call) Run(run func(ctx context.Context, stepRunID uuid.UUID, updates map[string]interface{})) *MockExecutionChainRepository_UpdateStepRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *MockExecutionChainRepository_UpdateStepRun_Call) Return(_a0 error) *MockExecutionChainRepository_UpdateStepRun_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionChainRepository_UpdateStepRun_Call) RunAndReturn(run func(context.Context, uuid.UUID, map[string]interface{}) error) *MockExecutionChainRepository_UpdateStepRun_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionChainRepository creates a new instance of MockExecutionChainRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionChainRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionChainRepository {
	mock := &MockExecutionChainRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
